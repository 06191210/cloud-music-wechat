{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst util_1 = require(\"util\");\nconst escodegen_1 = require(\"escodegen\");\nconst esprima_1 = require(\"esprima\");\nconst ast_types_1 = require(\"ast-types\");\nconst vm2_1 = require(\"vm2\");\n/**\n * Compiles sync JavaScript code into JavaScript with async Functions.\n *\n * @param {String} code JavaScript string to convert\n * @param {Array} names Array of function names to add `await` operators to\n * @return {String} Converted JavaScript string with async/await injected\n * @api public\n */\nfunction degenerator(code, _names) {\n    if (!Array.isArray(_names)) {\n        throw new TypeError('an array of async function \"names\" is required');\n    }\n    // Duplicate the `names` array since it's rude to augment the user args\n    const names = _names.slice(0);\n    const ast = esprima_1.parseScript(code);\n    // First pass is to find the `function` nodes and turn them into async or\n    // generator functions only if their body includes `CallExpressions` to\n    // function in `names`. We also add the names of the functions to the `names`\n    // array. We'll iterate several time, as every iteration might add new items\n    // to the `names` array, until no new names were added in the iteration.\n    let lastNamesLength = 0;\n    do {\n        lastNamesLength = names.length;\n        ast_types_1.visit(ast, {\n            visitVariableDeclaration(path) {\n                if (path.node.declarations) {\n                    for (let i = 0; i < path.node.declarations.length; i++) {\n                        const declaration = path.node.declarations[i];\n                        if (ast_types_1.namedTypes.VariableDeclarator.check(declaration) &&\n                            ast_types_1.namedTypes.Identifier.check(declaration.init) &&\n                            ast_types_1.namedTypes.Identifier.check(declaration.id) &&\n                            checkName(declaration.init.name, names) &&\n                            !checkName(declaration.id.name, names)) {\n                            names.push(declaration.id.name);\n                        }\n                    }\n                }\n                return false;\n            },\n            visitAssignmentExpression(path) {\n                if (ast_types_1.namedTypes.Identifier.check(path.node.left) &&\n                    ast_types_1.namedTypes.Identifier.check(path.node.right) &&\n                    checkName(path.node.right.name, names) &&\n                    !checkName(path.node.left.name, names)) {\n                    names.push(path.node.left.name);\n                }\n                return false;\n            },\n            visitFunction(path) {\n                if (path.node.id) {\n                    let shouldDegenerate = false;\n                    ast_types_1.visit(path.node, {\n                        visitCallExpression(path) {\n                            if (checkNames(path.node, names)) {\n                                shouldDegenerate = true;\n                            }\n                            return false;\n                        },\n                    });\n                    if (!shouldDegenerate) {\n                        return false;\n                    }\n                    // Got a \"function\" expression/statement,\n                    // convert it into an async function\n                    path.node.async = true;\n                    // Add function name to `names` array\n                    if (!checkName(path.node.id.name, names)) {\n                        names.push(path.node.id.name);\n                    }\n                }\n                this.traverse(path);\n            },\n        });\n    } while (lastNamesLength !== names.length);\n    // Second pass is for adding `await`/`yield` statements to any function\n    // invocations that match the given `names` array.\n    ast_types_1.visit(ast, {\n        visitCallExpression(path) {\n            if (checkNames(path.node, names)) {\n                // A \"function invocation\" expression,\n                // we need to inject a `AwaitExpression`/`YieldExpression`\n                const delegate = false;\n                const { name, parent: { node: pNode }, } = path;\n                const expr = ast_types_1.builders.awaitExpression(path.node, delegate);\n                if (ast_types_1.namedTypes.CallExpression.check(pNode)) {\n                    pNode.arguments[name] = expr;\n                }\n                else {\n                    pNode[name] = expr;\n                }\n            }\n            this.traverse(path);\n        },\n    });\n    return escodegen_1.generate(ast);\n}\n(function (degenerator) {\n    function compile(code, returnName, names, options = {}) {\n        const compiled = degenerator(code, names);\n        const vm = new vm2_1.VM(options);\n        const script = new vm2_1.VMScript(`${compiled};${returnName}`, {\n            filename: options.filename,\n        });\n        const fn = vm.run(script);\n        if (typeof fn !== 'function') {\n            throw new Error(`Expected a \"function\" to be returned for \\`${returnName}\\`, but got \"${typeof fn}\"`);\n        }\n        const r = function (...args) {\n            try {\n                const p = fn.apply(this, args);\n                if (typeof (p === null || p === void 0 ? void 0 : p.then) === 'function') {\n                    return p;\n                }\n                return Promise.resolve(p);\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        };\n        Object.defineProperty(r, 'toString', {\n            value: fn.toString.bind(fn),\n            enumerable: false,\n        });\n        return r;\n    }\n    degenerator.compile = compile;\n})(degenerator || (degenerator = {}));\n/**\n * Returns `true` if `node` has a matching name to one of the entries in the\n * `names` array.\n *\n * @param {types.Node} node\n * @param {Array} names Array of function names to return true for\n * @return {Boolean}\n * @api private\n */\nfunction checkNames({ callee }, names) {\n    let name;\n    if (ast_types_1.namedTypes.Identifier.check(callee)) {\n        name = callee.name;\n    }\n    else if (ast_types_1.namedTypes.MemberExpression.check(callee)) {\n        if (ast_types_1.namedTypes.Identifier.check(callee.object) &&\n            ast_types_1.namedTypes.Identifier.check(callee.property)) {\n            name = `${callee.object.name}.${callee.property.name}`;\n        }\n        else {\n            return false;\n        }\n    }\n    else if (ast_types_1.namedTypes.FunctionExpression.check(callee)) {\n        if (callee.id) {\n            name = callee.id.name;\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        throw new Error(`Don't know how to get name for: ${callee.type}`);\n    }\n    return checkName(name, names);\n}\nfunction checkName(name, names) {\n    // now that we have the `name`, check if any entries match in the `names` array\n    for (let i = 0; i < names.length; i++) {\n        const n = names[i];\n        if (util_1.isRegExp(n)) {\n            if (n.test(name)) {\n                return true;\n            }\n        }\n        else if (name === n) {\n            return true;\n        }\n    }\n    return false;\n}\nmodule.exports = degenerator;\n//# sourceMappingURL=index.js.map"]}